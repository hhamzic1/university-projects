==21202== Memcheck, a memory error detector
==21202== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==21202== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==21202== Command: /rhome/h/hhamzic1/workspace/NA/Z4/Z1/.runme
==21202== Parent PID: 21195
==21202== 
==21202== Invalid read of size 8
==21202==    at 0x10A27A: ChebyshevApproximation::integrate() const (main.cpp:138)
==21202==    by 0x1092A6: main (main.cpp:153)
==21202==  Address 0x5d7fd70 is 0 bytes after a block of size 32 alloc'd
==21202==    at 0x4C3017F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==21202==    by 0x10B1C9: __gnu_cxx::new_allocator<double>::allocate(unsigned long, void const*) (new_allocator.h:111)
==21202==    by 0x10AFFD: std::allocator_traits<std::allocator<double> >::allocate(std::allocator<double>&, unsigned long) (alloc_traits.h:436)
==21202==    by 0x10ADBB: std::_Vector_base<double, std::allocator<double> >::_M_allocate(unsigned long) (stl_vector.h:172)
==21202==    by 0x10AB93: std::vector<double, std::allocator<double> >::_M_default_append(unsigned long) (vector.tcc:571)
==21202==    by 0x10A8BC: std::vector<double, std::allocator<double> >::resize(unsigned long) (stl_vector.h:692)
==21202==    by 0x109643: ChebyshevApproximation::ChebyshevApproximation<main::{lambda(double)#1}>(main::{lambda(double)#1}, double, double, int) (main.cpp:29)
==21202==    by 0x10925C: main (main.cpp:152)
==21202== 
==21202== 
==21202== HEAP SUMMARY:
==21202==     in use at exit: 0 bytes in 0 blocks
==21202==   total heap usage: 7 allocs, 7 frees, 72,928 bytes allocated
==21202== 
==21202== All heap blocks were freed -- no leaks are possible
==21202== 
==21202== For counts of detected and suppressed errors, rerun with: -v
==21202== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
